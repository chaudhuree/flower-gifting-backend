generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String    @unique
  password        String
  role            RoleEnum  @default(USER)
  resetOTP        String?
  otpExpiration   DateTime?
  stripeCustomerId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  reviews         Review[]  // Relation to reviews
  orders          Order[]   // Relation to orders

  @@map("users")
}

enum RoleEnum {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  details     String
  description String
  price       Float
  rating      Float     @default(0)
  category    String
  occasions   String[]
  flowerType  String?
  images      String[]
  colors      String[]
  sizes       String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  reviews     Review[]  // Relation to reviews
  orderItems  OrderItem[]  // Relation to order items

  @@map("products")
}

model Review {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  rating      Float
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model GiftCard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  description String?
  price       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orders      Order[]   // Relation to orders

  @@map("giftcards")
}

// Model for order items (products in an order)
model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Int       @default(1)
  price       Float     // Price at time of order
  
  // Product relation
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Order relation
  orderId     String    @db.ObjectId
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("orderitems")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice      Float       @default(0)
  status          OrderStatus @default(PENDING)
  message         String?     // Message for the entire order
  qrCode          String?     // QR code for the entire order
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Sender information
  senderName      String?
  senderEmail     String?
  
  // Recipient information
  recipientName   String?
  recipientEmail  String?
  deliveryAddress String?
  deliveryDate    DateTime?
  
  // Payment information
  paymentMethod   String?
  paymentStatus   String?
  paymentId       String?

  // Anonimous order
  annonimous      Boolean     @default(false)
  
  // Relations
  userId          String?     @db.ObjectId
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Gift card relation (optional, for the entire order)
  giftCardId      String?     @db.ObjectId
  giftCard        GiftCard?   @relation(fields: [giftCardId], references: [id], onDelete: SetNull)
  
  // Order items relation
  orderItems      OrderItem[] // Relation to order items

  @@map("orders")
}